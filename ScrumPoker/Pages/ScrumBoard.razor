@page "/{RoomId}/{UserId}"
@using ScrumPoker.Model
@using StackExchange.Redis.Extensions.Core.Abstractions;
@inject NavigationManager NavigationManager
@inject IRedisCacheClient RedisCacheClient
@inject IJSRuntime JSRuntime

<div class="row mt-2">
    <div class="col">
        <div class="d-flex justify-content-sm-start justify-content-md-between flex-sm-wrap">
            <div class="card p-4 pointer point-card-text m-sm-2 shadow" @onclick="args => SetPoint(0.5, args)"> 0.5 </div>
            <div class="card p-4 pointer point-card-text m-sm-2 shadow" @onclick="args => SetPoint(1, args)"> 1 </div>
            <div class="card p-4 pointer point-card-text m-sm-2 shadow" @onclick="args => SetPoint(2, args)"> 2 </div>
            <div class="card p-4 pointer point-card-text m-sm-2 shadow" @onclick="args => SetPoint(3, args)"> 3 </div>
            <div class="card p-4 pointer point-card-text m-sm-2 shadow" @onclick="args => SetPoint(5, args)"> 5 </div>
            <div class="card p-4 pointer point-card-text m-sm-2 shadow" @onclick="args => SetPoint(8, args)"> 8 </div>
            <div class="card p-4 pointer point-card-text m-sm-2 shadow" @onclick="args => SetPoint(13, args)"> 13 </div>
            <div class="card p-4 pointer point-card-text m-sm-2 shadow" @onclick="args => SetPoint(21, args)"> 21 </div>
        </div>
    </div>
</div>

<div class="row mt-2">
    <div class="col-md-6 mb-sm-2">
        <div class="d-flex justify-content-between">
            <button class="btn btn-outline-primary" @onclick="copyTextToClipboard"> <i class="bi bi-link-45deg"></i> Copy Link </button>
            <button class="btn btn-secondary" @onclick="args => SetPoint(-1, args)"> <i class="bi bi-x-octagon-fill"></i> Skip </button>
            @if (user.IsAdmin)
            {
                <button class="btn btn-warning" @onclick="clearPoint"> <i class="bi bi-eraser-fill"></i> Clear </button>

                @if (room.IsShowPoint)
                {
                    <button class="btn btn-outline-success" @onclick="togglePoint">
                        <i class="bi bi-eye-slash-fill"></i> <span> Hide</span>
                    </button>
                }
                else
                {
                    <button class="btn btn-success" @onclick="togglePoint">
                        <i class="bi bi-eye-fill"></i> <span>Show</span>
                    </button>
                }

            }
             <button class="btn btn-primary" @onclick="PullDatabase"> <i class="bi bi-arrow-counterclockwise"></i> Refresh </button>
         </div>
    </div>

    <div class="col-md-6">
        @if (user.IsAdmin)
        {
            <EditForm Model=@card>
                <div class="row">
                    <div class="col-7">
                        <InputText @bind-Value=card.Name type="text" class="form-control" />
                    </div>
                    <div class="col-2">
                        <InputNumber @bind-Value=card.Point type="number" class="form-control" />
                    </div>
                    <div class="col-3">
                        <button class="btn btn-primary" @onclick="addOrUpdateCard">
                            <i class="@(card.Id > 0 ? "bi bi-pen-fill" : "bi bi-plus-square-fill")"></i>
                        </button>
                        <button class="btn btn-secondary" @onclick="resetCard"> <i class="bi bi-backspace-fill"></i> </button>
                        @if (card.Id > 0)
                        {
                            <button class="btn btn-danger"
                                    @onclick="args => deleteCard(card, args)"
                                    @onclick:stopPropagation="true">
                                <i class="bi bi-trash-fill"></i>
                            </button>
                        }
                    </div>
                </div>
            </EditForm>
        }
    </div>
</div>

<div class="mt-2">
    <div class="row">
        <div class="col-md-6 mb-sm-2">
            <div class="list-group">
                @foreach (var user in room.Users)
                {
                    <div class="list-group-item d-flex justify-content-between">
                        <div class="flex-grow-1">
                            @if (!user.IsAdmin)
                            {<span @onclick="args => toggleAdmin(user, args)"><i class="bi bi-person"></i></span>}
                            else
                            {<span @onclick="args => toggleAdmin(user, args)"><i class="bi bi-person-fill"></i></span>}
                            <span class="@(user.Id == UserId ? "user-indication" : "")"> @user.FullName </span>
                        </div>
                        <div class="px-3">
                            @if (user.Point == 0)
                            {
                                <i class="bi bi-hourglass-split"></i>
                            }
                            else if (user.Point == -1)
                            {
                                <i class="bi bi-x-octagon-fill"></i>
                            }
                            else if (user.Id == UserId || room.IsShowPoint)
                            {
                                <span class="fs-6"> @user.Point </span> 
                            }
                            else if (!room.IsShowPoint && user.Point > 0)
                            {
                                <i class="bi bi-eye-slash-fill"></i>
                            }
                        </div>
                        <div @onclick="args => DeleteUser(user, args)">
                            <i class="bi-trash-fill"></i>
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="col-md-6">
            <div class="list-group">
                @foreach (var card in room.Cards)
                {
                    <div class="list-group-item d-flex justify-content-between" @onclick="args => editCard(card, args)">
                        <div> @card.Name </div>
                        <div> @card.Point </div>
                    </div>
                }
                <div class="border border-primary list-group-item d-flex justify-content-between">
                    <div> Total </div>
                    <div> @sum  </div>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public string UserId { get; set; }

    [Parameter]
    public string RoomId { get; set; }

    private Card card = new Card();
    private User user = new User();
    private Room room = new Room();

    private double sum = 0;

    //protected override void OnParametersSet(){}

    protected override async Task OnInitializedAsync()
    {
        await PullDatabase();
        user = room.Users.FirstOrDefault(x => x.Id == UserId);
        if (user != null)
        {
            sum = room.Cards.Sum(x => x.Point);

        } else
        {
            NavigationManager.NavigateTo($"/{RoomId}");
        }
    }

    private async Task SetPoint(double point, MouseEventArgs args)
    {
        await PullDatabase();
        User objUser = room.Users.FirstOrDefault(x => x.Id == UserId);
        if (objUser != null && !room.IsShowPoint)
        {
            objUser.Point = point;
            await PushDatabase();
        }
    }

    private async Task togglePoint()
    {
        await PullDatabase();
        room.IsShowPoint = !room.IsShowPoint;
        await PushDatabase();
    }

    private async Task clearPoint()
    {
        await PullDatabase();
        room.Users.All(x => { x.Point = 0; return true; });
        room.IsShowPoint = false;
        await PushDatabase();
    }

    private async Task toggleAdmin(User adminUser, MouseEventArgs args)
    {
        await PullDatabase();
        if (user.IsAdmin && user.Id != adminUser.Id)
        {
            User objUser = room.Users.FirstOrDefault(x => x.Id == adminUser.Id);
            if (objUser != null)
            {
                objUser.IsAdmin = !objUser.IsAdmin;
            }
        }
        await PushDatabase();
    }

    private async Task copyTextToClipboard()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", $"{NavigationManager.BaseUri}{RoomId}");
        }
        catch (Exception)
        {
            throw new Exception("Copy shared link is not working");
        }
    }

    private async Task DeleteUser(User deleteUser, MouseEventArgs args)
    {
        await PullDatabase();
        User userObj = room.Users.FirstOrDefault(x => x.Id == deleteUser.Id);
        if (userObj != null && user.Id != deleteUser.Id)
        {
            room.Users.Remove(userObj);
            await PushDatabase();
        }
    }


    /// Card functionality

    private async Task addOrUpdateCard()
    {
        if (!string.IsNullOrWhiteSpace(card.Name) && card.Point > 0)
        {
            if (card.Id > 0)
            {
                Card cardObj = room.Cards.FirstOrDefault(x => x.Id == card.Id);
                cardObj.Name = card.Name;
                cardObj.Point = card.Point;
            }
            else
            {
                await PullDatabase();
                var newCard = new Card
                {
                    Id = room.Cards.Count + 1,
                    Name = card.Name,
                    Point = card.Point
                };

                room.Cards.Add(newCard);
            }

            sum = room.Cards.Sum(x => x.Point);
            card = new Card();
            await PushDatabase();
        }
    }

    private async Task editCard(Card editCard, MouseEventArgs args)
    {
        await PullDatabase();
        Card cardObj = room.Cards.FirstOrDefault(x => x.Id == editCard.Id);
        if (cardObj != null)
        {
            card = editCard;
        }
    }

    private void resetCard()
    {
        card = new Card();
    }

    private async Task deleteCard(Card deleteCard, MouseEventArgs args)
    {
        await PullDatabase();
        Card cardObj = room.Cards.FirstOrDefault(x => x.Id == deleteCard.Id);
        if (cardObj != null)
        {
            room.Cards.Remove(cardObj);
            await PushDatabase();
            resetCard();
        }
    }

    private async Task PushDatabase()
    {
        await RedisCacheClient.Db0.AddAsync(RoomId, room,
        DateTime.UtcNow.AddDays(5));
    }

    private async Task PullDatabase()
    {
        room = await RedisCacheClient.Db0.GetAsync<Room>(RoomId);
    }

}
